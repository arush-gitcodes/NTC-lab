def encrypt_rail_fence(text, rails):
    # Initialize the rail matrix
    rail = [['\n' for _ in range(len(text))] for _ in range(rails)]
    down = False
    row, col = 0, 0

    # Fill the rail matrix in a zig-zag pattern
    for char in text:
        rail[row][col] = char
        col += 1

        # Reverse the direction if we reach the top or bottom rail
        if row == 0 or row == rails - 1:
            down = not down
        row += 1 if down else -1

    # Read the matrix row by row to get the encrypted text
    encrypted_text = []
    for i in range(rails):
        for j in range(len(text)):
            if rail[i][j] != '\n':
                encrypted_text.append(rail[i][j])

    return ''.join(encrypted_text)


def decrypt_rail_fence(ciphertext, rails):
    # Initialize the rail matrix
    rail = [['\n' for _ in range(len(ciphertext))] for _ in range(rails)]
    down = None
    row, col = 0, 0

    # Mark positions with '*'
    for char in ciphertext:
        rail[row][col] = '*'
        col += 1

        if row == 0 or row == rails - 1:
            down = not down
        row += 1 if down else -1

    # Fill the rail matrix with characters from ciphertext
    index = 0
    for i in range(rails):
        for j in range(len(ciphertext)):
            if rail[i][j] == '*' and index < len(ciphertext):
                rail[i][j] = ciphertext[index]
                index += 1

    # Read the matrix in a zig-zag pattern to get the decrypted text
    decrypted_text = []
    row, col = 0, 0
    for char in ciphertext:
        decrypted_text.append(rail[row][col])
        col += 1

        if row == 0 or row == rails - 1:
            down = not down
        row += 1 if down else -1

    return ''.join(decrypted_text)


# Example usage
message = input("Enter the message: ")
rails = int(input("Enter the number of rails: "))

encrypted_message = encrypt_rail_fence(message, rails)
print("Encrypted message:", encrypted_message)

decrypted_message = decrypt_rail_fence(encrypted_message, rails)
print("Decrypted message:", decrypted_message)
